import { useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import { ethers, providers } from 'ethers';
import ValistLicenseClient from '../../../dist/index.js';
import styles from '../styles/Home.module.css';

export default function Home() {
  const [provider, setProvider] = useState<providers.Web3Provider | null>(null);
  const [chainId, setChainId] = useState<number | null>(null);
  const [account, setAccount] = useState('');
  const [projectIdInput, setProjectIdInput] = useState('');
  const [hasLicense, setHasLicense] = useState(true);
  const [logMessage, setLogMessage] = useState('');

  const connectWallet = async () => {
    try {
      if ((window as any)?.ethereum) {
        const accounts = await (window as any).ethereum.request({
          method: "eth_requestAccounts"
        });
        console.log("Using account: ", accounts[0]);
        const provider = new providers.Web3Provider((window as any)?.ethereum);
        const { chainId } = await provider.getNetwork();
        if (chainId !== 80001) {
          console.log("Please connect to Polygon Mumbai Testnet");
          // switch to the polygon testnet
          await (window as any).ethereum
            .request({
              method: "wallet_switchEthereumChain",
              params: [{ chainId: "0x13881" }]
            });
        }
        console.log("chainId:", chainId);
        setProvider(provider);
        setChainId(chainId);
        setAccount(accounts[0]);
      } else {
        console.log("Please use Web3 enabled browser");
        setLogMessage("Please use Web3 enabled browser");
      }
    } catch (err) {
      console.log("Error connecting wallet", err);
      setLogMessage("Error connecting wallet");
    }
  };
  const purchaseLicense = async () => {
    try {
      if (!projectIdInput) throw new Error('Please enter a project id');
      const valistLicenseClient = new ValistLicenseClient(provider, chainId);
      const tx = await valistLicenseClient.purchaseLicense(projectIdInput, account);
      console.log('tx', tx);
      await tx.wait();
      console.log('License purchased');
      setLogMessage('License purchased');
    } catch (err) {
      console.log("Error purchasing license", err);
      setLogMessage("Error purchasing license");
    }
  };

  const purchaseLicenseWithToken = async () => {
    try {
      if (!projectIdInput) return setLogMessage("Please enter a projectId");
      const valistLicenseClient = new ValistLicenseClient(provider, chainId);
      const tx = await valistLicenseClient.purchaseLicenseWithToken(projectIdInput, account, '0xe6b8a5CF854791412c1f6EFC7CAf629f5Df1c747');
      console.log('tx', tx);
      await tx.wait();
      console.log('License purchased with USDC');
      setLogMessage('License purchased');
    } catch (err) {
      console.log("Error purchasing license with USDC", err);
      setLogMessage("Error purchasing license with USDC");
    }
  };
  const checkLicense = async () => {
    try {
      const valistLicenseClient = new ValistLicenseClient(provider, chainId);
      if (!projectIdInput) return setLogMessage("Please enter a projectId");
      const signingMessage = "I am signing this message";
      const hasLicense = await valistLicenseClient.checkLicense(12, signingMessage);
      console.log('hasLicense', hasLicense);
      setHasLicense(hasLicense);
      setLogMessage(hasLicense ? 'You have a license for this project' : 'You do not have a license for this project');
    } catch (err) {
      console.log("Error checking license", err);
      setLogMessage("Error checking license");
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Valist License Gating App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Valist License Gating</a>
        </h1>

        <p className={styles.description}>
          Get started by connecting your wallet
        </p>
        {account ? (
          <div>
            <p>Connected with <b>{account}</b></p>
            <input
              className={styles.input}
              type="text"
              placeholder="Project ID"
              value={projectIdInput}
              onChange={(e) => setProjectIdInput(e.target.value)}
            />
            <button className={styles.button} onClick={checkLicense}>Check License</button>
            {!hasLicense && (
              <>
                {/* purchase license with token */}
                <button className={styles.button} onClick={purchaseLicense}>Purchase License</button>
                <button className={styles.button} onClick={purchaseLicenseWithToken}>Purchase License with USDC</button>
              </>
            )}
          </div>
        ) : (
          <button className={styles.button} onClick={connectWallet}>Connect Wallet</button>
        )}
        <b>{logMessage}</b>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}
